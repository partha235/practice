import dht
import time
import bmp180
from machine import SoftI2C, Pin

# **Setup DHT11 sensor**
DHT_PIN = 14  # Change this to your GPIO pin
dht_sensor = dht.DHT11(Pin(DHT_PIN))
led=Pin(2,Pin.OUT)


# **Setup BMP180 sensor (I2C)**
I2C_SDA = 21  # Default ESP32 SDA
I2C_SCL = 22  # Default ESP32 SCL

i2c = SoftI2C(scl=Pin(I2C_SCL), sda=Pin(I2C_SDA), freq=100000)
bmp = bmp180.BMP180(i2c)
bmp.oversample_sett = 2
bmp.baseline = 101325  # Default sea level pressure

# **Filename to store data**
FILENAME = "senread.txt"

# **Number of days & readings per day**
NUM_DAYS = 7  # Change this as needed
READINGS_PER_DAY = 5  # Number of readings per day
READ_INTERVAL = 60  # Time interval between readings (seconds) (change as needed)

# **Function to read sensors and log data**
def log_sensor_data(day, reading):
    try:
        # **Read DHT11 sensor**
        dht_sensor.measure()
        temperature_dht = dht_sensor.temperature()
        humidity = dht_sensor.humidity()

        # **Read BMP180 sensor**
        temperature_bmp = bmp.temperature
        pressure = bmp.pressure
        altitude = bmp.altitude

        # **Format log entry**
        log_entry = "Day-{} (Reading {}): DHT Temp: {}°C, Humidity: {}%, BMP Temp: {}°C, Pressure: {} hPa, Altitude: {} m\n".format(
            day, reading, temperature_dht, humidity, temperature_bmp, pressure / 100, altitude
        )

        # **Append data to file**
        with open(FILENAME, "a") as file:
            file.write(log_entry)

        print("Logged:", log_entry.strip())

    except Exception as e:
        print("Error reading sensors:", e)

# **Loop for `NUM_DAYS`**
for day in range(1, NUM_DAYS + 1):
    led.value(1)
    print(f"\n--- Logging Data for Day-{day} ---")
    for reading in range(1, READINGS_PER_DAY + 1):
        log_sensor_data(day, reading)
        if reading < READINGS_PER_DAY:  # Avoid waiting after last reading of the day
            print(f"Waiting {READ_INTERVAL} seconds until next reading...\n")
            led.value(1)
            time.sleep(READ_INTERVAL)  # Wait for the next reading
    print(f"--- Completed Day-{day}, waiting for next day ---\n")
    time.sleep(1)  # Short pause before starting the next day
    
